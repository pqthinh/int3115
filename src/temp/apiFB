import { StatusBar } from 'expo-status-bar';
import React, { useEffect } from 'react';
import { Button, StyleSheet, Text, View, Alert, ScrollView } from 'react-native';
import * as Facebook from 'expo-facebook';

async function logIn() {
    try {
      await Facebook.initializeAsync({
        appId: '292225215843171',
      });
      const {
        type,
        token,
        expirationDate,
        permissions,
        declinedPermissions,
      } = await Facebook.logInWithReadPermissionsAsync({
        permissions: ['public_profile', 'email'],
      });

      console.log(type, "type")
      console.log(token, "token")
      if (type === 'success') {
        // Get the user's name using Facebook's Graph API
        const response = await fetch(`https://graph.facebook.com/me?fields=birthday,email,hometown,picture,link,education,name&access_token=${token}`);
        const res =  await response.json();
        res.token = token
        Alert.alert('Logged in!', `Hi ${JSON.stringify(res)}!`);
      } else {
        // type === 'cancel'
      }
    } catch ({ message }) {
      alert(`Facebook Login Error: ${message}`);
    }
  }
  async function getUserAsync() {
    const { name } = await requestAsync('me');
    console.log(`Hello ${name} ðŸ‘‹`);
  }
  
  async function requestAsync(path, token) {
    let resolvedToken = token;
    if (!token) {
      const auth = await Facebook.getAuthenticationCredentialAsync();
      if (!auth) {
        throw new Error(
          'User is not authenticated. Ensure `logInWithReadPermissionsAsync` has successfully resolved before attempting to use the FBSDK Graph API.'
        );
      }
      resolvedToken = auth.token;
    }
    const response = await fetch(
      `https://graph.facebook.com/${path}?access_token=${encodeURIComponent(resolvedToken)}`
    );
    const body = await response.json();
    return body;
  }



// login google


let config = {
    issuer: 'https://accounts.google.com',
    scopes: ['openid', 'profile'],
    /* This is the CLIENT_ID generated from a Firebase project 
    603386649315-vp4revvrcgrcjme51ebuhbkbspl048l9.apps.googleusercontent.com
    */
    // clientId: '35828778416-kodktvuttg9qnanqlis0ndi2nuu05765.apps.googleusercontent.com',
    clientId: '603386649315-vp4revvrcgrcjme51ebuhbkbspl048l9.apps.googleusercontent.com'
};

let StorageKey = '@GoogleOAuth';

export async function signInAsync() {
    // First- obtain access token from Expo's Google API
    const { type, accessToken, user } = await Google.logInAsync(config);
    
    if (type === 'success') {

        let currentUser = user?  user : {
            "email": "thinhpq@its-global.vn",
            "familyName": "Thá»‹nh",
            "givenName": "Pháº¡m  Quang ",
            "id": "101515449108053546199",
            "name": "Pháº¡m Quang Thá»‹nh",
            "photoUrl": "https://lh4.googleusercontent.com/--3fWxbHJoaI/AAAAAAAAAAI/AAAAAAAAAAA/AMZuucmfmUxjD2s-iSLGS2ULwUX_jKOyyg/s96-c/photo.jpg",
        }
       
        currentUser.accessToken = accessToken
        await cacheAuthAsync(currentUser);
        // navigation.navigate("MainApp", {user: currentUser})

        return currentUser

        // Then you can use the Google REST API
        // let userInfoResponse = await fetch('https://www.googleapis.com/userinfo/v2/me', {
        //     headers: { Authorization: `Bearer ${accessToken}` },
        // });
        // console.log(JSON.stringify(userInfoResponse), "respon")
    }
   
    // let authState = await AppAuth.authAsync(config);
    // // await cacheAuthAsync(authState);
    // console.log('signInAsync', authState);
    // console.log(authState, "cache")
    // return authState;
  }
  
  async function cacheAuthAsync(authState) {
    return await AsyncStorage.setItem(StorageKey, JSON.stringify(authState));
  }
  
  export async function getCachedAuthAsync() {
    let value = await AsyncStorage.getItem(StorageKey);
    let authState = JSON.parse(value);

    console.log('getCachedAuthAsync', authState);

    if (authState) {
      if (checkIfTokenExpired(authState)) {
        return refreshAuthAsync(authState);
      } else {
        return authState;
      }
    }
    return null;
  }
  
  function checkIfTokenExpired({ accessTokenExpirationDate }) {
    return new Date(accessTokenExpirationDate) < new Date();
  }
  
  async function refreshAuthAsync({ refreshToken }) {
    let authState = await AppAuth.refreshAsync(config, refreshToken);
    console.log('refreshAuth', authState);
    await cacheAuthAsync(authState);
    return authState;
  }
  
  export async function signOutAsync({ accessToken }) {
    try {
      await AppAuth.revokeAsync(config, {
        token: accessToken,
        isClientIdProvided: true,
      });
      await AsyncStorage.removeItem(StorageKey);
      return null;
    } catch (e) {
      alert(`Failed to revoke token: ${e.message}`);
    }
  }
  